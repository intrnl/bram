var symbol='function'==typeof Symbol?Symbol:function(a){return'@@-'+a};const asap=Promise.resolve().then.bind(Promise.resolve());class Transaction{static add(a){this.current=a,this.stack.push(a)}static remove(){this.stack.pop(),this.current=this.stack[this.stack.length-1]}static observe(a,b){this.current&&this.current.stack.push([a,b])}constructor(){this.stack=[]}start(){Transaction.add(this)}stop(){return Transaction.remove(),this.stack}}Transaction.stack=[];function isArraySet(a,b){return Array.isArray(a)&&!isNaN(+b)}function isArrayOrObject(a){return Array.isArray(a)||'object'==typeof a}function observe(a,b){var c=new Proxy(a,{get:function(d,e){return Transaction.observe(c,e),d[e]},set:function(d,e,f){var g=d[e];// If the value hasn't changed, nothing else to do
return!(!isModel(f)&&isArrayOrObject(f)&&(f=toModel(f)),d[e]=f,f!==g)||(isArraySet(d,e)?b({prop:arrayChange,index:+e,type:'set'},f):b({prop:e,type:'set'},f),!0)},deleteProperty:function(d,e){return isArraySet(d,e)&&b({prop:arrayChange,index:+e,type:'delete'}),!0}});return c}var events=symbol('bram-events'),arrayChange=symbol('bram-array-change'),toModel=function(a,b){return isModel(a)?a:(a=deepModel(a)||{},Object.defineProperty(a,events,{value:{},enumerable:!1}),observe(a,b))};function deepModel(a){return a?Object.keys(a).reduce(function(b,c){var d=a[c];return b[c]=Array.isArray(d)||'object'==typeof d?toModel(d):d,b},a):a}var isModel=function(a){return a&&!!a[events]},on=function(a,b,c){var d=a[events];if(d){var e=d[b];e||(e=d[b]=[]),e.push(c)}},off=function(a,b,c){var d=a[events];if(d){var e=d[b];if(e){var f=e.indexOf(c);-1===f||(e.splice(f,1),!e.length&&delete d[b])}}};/**
 * @license
 * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at http:polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at http:polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at http:polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at http:polymer.github.io/PATENTS.txt
 */class TemplateProcessor{}/**
 * @license
 * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at http:polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at http:polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at http:polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at http:polymer.github.io/PATENTS.txt
 */const partOpenRe=/{{/g,partCloseRe=/}}/g,parse=a=>{const b=[],c=[],d=a.length+1;for(let e=partOpenRe.lastIndex=partCloseRe.lastIndex=0;e<d;){const f=partOpenRe.exec(a);if(null==f){b.push(a.substring(e,d));break}else{const g=f.index;partCloseRe.lastIndex=partOpenRe.lastIndex=g+2;const h=partCloseRe.exec(a);if(null==h)b.push(a.substring(e,d));else{const j=h.index;b.push(a.substring(e,g)),c.push(a.substring(g+2,j)),e=j+2}}}return[b,c]};/**
 * @license
 * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at http:polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at http:polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at http:polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at http:polymer.github.io/PATENTS.txt
 */class TemplateRule{constructor(a){this.nodeIndex=a}}class NodeTemplateRule extends TemplateRule{constructor(a,b){super(a),this.nodeIndex=a,this.expression=b}}class AttributeTemplateRule extends TemplateRule{constructor(a,b,c,d){super(a),this.nodeIndex=a,this.attributeName=b,this.strings=c,this.expressions=d}}class InnerTemplateRule extends NodeTemplateRule{constructor(a,b){super(a,b.getAttribute('expression')||''),this.nodeIndex=a,this.template=b}}/**
 * @license
 * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at http:polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at http:polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at http:polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at http:polymer.github.io/PATENTS.txt
 */// Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null
const createTreeWalker=a=>document.createTreeWalker(a,NodeFilter.SHOW_ELEMENT|NodeFilter.SHOW_TEXT,null,!1);class TemplateDefinition{constructor(a){this.template=a,this.parseAndGenerateRules()}cloneContent(){return this.parsedTemplate.content.cloneNode(!0)}parseAndGenerateRules(){const{template:a}=this,b=a.content.cloneNode(!0),c=[],d=[],e=createTreeWalker(b);for(let f=-1;e.nextNode();){f++;const g=e.currentNode;if(g.nodeType===Node.ELEMENT_NODE){if(!g.hasAttributes())continue;if(g instanceof HTMLTemplateElement){const{parentNode:h}=g,j=document.createTextNode('');d.push(()=>h.replaceChild(j,g)),c.push(new InnerTemplateRule(f,g))}else{const{attributes:h}=g;// TODO(cdata): Fix IE/Edge attribute order here
// @see https://github.com/Polymer/lit-html/blob/master/src/lit-html.ts#L220-L229
for(let j=0;j<h.length;){const k=h[j],{name:l,value:m}=k,[n,p]=parse(m);if(1===n.length){++j;continue}c.push(new AttributeTemplateRule(f,l,n,p)),g.removeAttribute(l)}}}else if(g.nodeType===Node.TEXT_NODE){const[h,j]=parse(g.nodeValue||''),{parentNode:k}=g,l=g.ownerDocument;if(1===h.length)continue;for(let m=0;m<j.length;++m){const n=l.createTextNode(h[m]);// @see https://github.com/Polymer/lit-html/blob/master/src/lit-html.ts#L267-L272
k.insertBefore(n,g),c.push(new NodeTemplateRule(f++,j[m]))}g.nodeValue=h[h.length-1]}}// Execute mutations
for(let g of d)g();this.rules=c,this.parsedTemplate=document.createElement('template'),this.parsedTemplate.content.appendChild(b)}}/**
 * @license
 * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at http:polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at http:polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at http:polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at http:polymer.github.io/PATENTS.txt
 */class TemplatePart{constructor(a,b){this.templateInstance=a,this.rule=b}get value(){return this.sourceValue}set value(a){a!==this.sourceValue&&(this.sourceValue=a,this.applyValue(a))}}class AttributeTemplatePart extends TemplatePart{constructor(a,b,c){super(a,b),this.templateInstance=a,this.rule=b,this.element=c}clear(){this.element.removeAttribute(this.rule.attributeName)}applyValue(a){null==a?a=[]:!Array.isArray(a)&&(a=[a]);const{rule:b,element:c}=this,{strings:d,attributeName:e}=b,f=[];for(let h=0;h<d.length-1;++h)f.push(d[h]),f.push(a[h]||'');const g=f.join('');null==g?c.removeAttribute(e):c.setAttribute(e,g)}}class NodeTemplatePart extends TemplatePart{constructor(a,b,c){super(a,b),this.templateInstance=a,this.rule=b,this.startNode=c,this.currentNodes=[],this.move(c)}replace(...a){this.clear();for(let b=0;b<a.length;++b){let c=a[b];// SPECIAL NOTE(cdata): This implementation supports NodeTemplatePart as
// a replacement node. Usefulness TBD.
if('string'==typeof c&&(c=document.createTextNode(c)),c instanceof NodeTemplatePart){const d=c;c=d.startNode,this.appendNode(c),d.move(c)}else if(c.nodeType===Node.DOCUMENT_FRAGMENT_NODE||c.nodeType===Node.DOCUMENT_NODE)// NOTE(cdata): Apple's proposal explicit forbid's document fragments
// @see https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Template-Instantiation.md
throw new DOMException('InvalidNodeTypeError');else this.appendNode(c)}}/**
     * Forks the current part, inserting a new part after the current one and
     * returning it. The forked part shares the TemplateInstance and the
     * TemplateRule of the current part.
     */fork(){const a=document.createTextNode('');return this.parentNode.insertBefore(a,this.nextSibling),this.nextSibling=a,new NodeTemplatePart(this.templateInstance,this.rule,a)}/**
     * Creates a new inner part that is enclosed completely by the current
     * part and returns it. The enclosed part shares the TemplateInstance and the
     * TemplateRule of the current part.
     */enclose(){const a=document.createTextNode('');return this.parentNode.insertBefore(a,this.previousSibling.nextSibling),new NodeTemplatePart(this.templateInstance,this.rule,a)}move(a){const{currentNodes:b,startNode:c}=this;null!=c&&c!==a&&b.length&&this.clear(),this.parentNode=a.parentNode,this.previousSibling=a,this.nextSibling=a.nextSibling,this.startNode=a,b&&b.length&&this.replace(...b)}// SPECIAL NOTE(cdata): This clear is specialized a la lit-html to accept a
// starting node from which to clear. This supports efficient cleanup of
// subparts of a part (subparts are also particular to lit-html compared to
// Apple's proposal).
clear(a=this.previousSibling.nextSibling){if(null!==this.parentNode){for(let b=a;b!==this.nextSibling;){const c=b.nextSibling;this.parentNode.removeChild(b),b=c}this.currentNodes=[]}}appendNode(a){this.parentNode.insertBefore(a,this.nextSibling),this.currentNodes.push(a)}applyValue(a){1===this.currentNodes.length&&this.currentNodes[0].nodeType===Node.TEXT_NODE?this.currentNodes[0].nodeValue=a:this.replace(document.createTextNode(a))}}class InnerTemplatePart extends NodeTemplatePart{constructor(a,b,c){super(a,b,c),this.templateInstance=a,this.rule=b,this.startNode=c}get template(){return this.rule.template}}/**
 * @license
 * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at http:polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at http:polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at http:polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at http:polymer.github.io/PATENTS.txt
 */class TemplateInstance extends DocumentFragment{constructor(a,b,c){super(),this.definition=a,this.processor=b,this.createdCallbackInvoked=!1,this.previousState=null,this.appendChild(a.cloneContent()),this.generateParts(),this.update(c)}update(a){this.createdCallbackInvoked||(this.processor.createdCallback(this.parts,a),this.createdCallbackInvoked=!0),this.processor.processCallback(this.parts,a),this.previousState=a}generateParts(){const{definition:a}=this,{rules:b}=a,c=[],d=createTreeWalker(this);let e=-1;for(let f=0;f<b.length;++f){const g=b[f],{nodeIndex:h}=g;for(;e<h;)e++,d.nextNode();const j=this.createPart(g,d.currentNode);c.push(j)}this.parts=c}// NOTE(cdata): In the original pass, this was exposed in the
// TemplateProcessor to be optionally overridden so that parts could
// have custom implementations.
createPart(a,b){if(a instanceof AttributeTemplateRule)return new AttributeTemplatePart(this,a,b);if(a instanceof InnerTemplateRule)return new InnerTemplatePart(this,a,b);if(a instanceof NodeTemplateRule)return new NodeTemplatePart(this,a,b);throw new Error(`Unknown rule type.`)}}/**
 * @license
 * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at http:polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at http:polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at http:polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at http:polymer.github.io/PATENTS.txt
 */const templateDefinitionCache=new Map,createInstance=function(a,b,c,d=!1){if(null==b)throw new Error('The first argument of createInstance must be an implementation of TemplateProcessor');(!templateDefinitionCache.has(a)||d)&&templateDefinitionCache.set(a,new TemplateDefinition(a));const e=templateDefinitionCache.get(a);return new TemplateInstance(e,b,c)};function notImplemented(){throw new Error('Not yet implemented')}class EventTemplatePart extends TemplatePart{constructor(a,b){super(),Object.assign(this,a),this._state=b}clear(){notImplemented()}applyValue(a){const b=a.bind(this._state);this.element.addEventListener('click',b)}}class BramTemplateProcessor extends TemplateProcessor{createdCallback(a,b){for(let c=a[0],d=0;c;)c instanceof AttributeTemplatePart&&c.rule.attributeName.startsWith('@')&&(a[d]=new EventTemplatePart(c,b)),d++,c=a[d]}processCallback(a,b){for(const c of a)if(c instanceof InnerTemplatePart);else if(c instanceof NodeTemplatePart){const{expression:d}=c.rule;c.value=b&&d&&b[d]}else if(c instanceof AttributeTemplatePart){const{expressions:d}=c.rule;c.value=b&&d&&d.map(e=>b&&b[e])}else if(c instanceof EventTemplatePart){const{expressions:d}=c.rule;c.value=b&&b[d[0]]}}}const processor=new BramTemplateProcessor;function createInstance$1(a,b){let c=createInstance(a,processor,b);const d=toModel(b,()=>{c.update(d)});return{model:d,fragment:c}}function getTemplate(a){return'string'==typeof a?document.querySelector(a):a}function Bram(a){return class extends a{constructor(){super();// Initially an empty object
const b=this.constructor;this._instance=createInstance$1(getTemplate(b.template),Object.create(this)),this.model=this._instance.model,this._hasRendered=!1;let c=b.events;c&&!b._hasSetupEvents&&installEvents(b);let d=!b._hasInstalledProps&&b.observedProperties;d&&(b._hasInstalledProps=!0,installProps(b,d,b.observedAttributes))}connectedCallback(){if(this._instance&&!this._hasRendered){let b=this.constructor.renderMode;'light'===b?(this.innerHTML='',this.appendChild(this._instance.fragment)):(this.attachShadow({mode:'open'}),this.shadowRoot.appendChild(this._instance.fragment)),this._hasRendered=!0}else if(this._hasRendered);this.childrenConnectedCallback&&(this._disconnectChildMO=setupChildMO(this))}disconnectedCallback(){this._disconnectChildMO&&this._disconnectChildMO(),this._link&&this._link.detach()}attributeChangedCallback(b,c,d){var e=this.constructor._syncedAttrs,f=e&&e[b];f&&this[b]!==d&&(this[b]=d)}}}const Element=Bram(HTMLElement);Bram.Element=Element,Bram.model=toModel,Bram.on=on,Bram.off=off,Bram.createInstance=createInstance$1;function installEvents(a){a._hasSetupEvents=!0,a.events.forEach(function(b){Object.defineProperty(a.prototype,'on'+b,{get:function(){return this['_on'+b]},set:function(c){var d='_on'+b,e=this[d];e&&this.removeEventListener(b,e),this[d]=c,this.addEventListener(b,c)}})})}function installProps(a,b,c=[]){a._syncedAttrs={};var d=a.prototype;b.forEach(function(e){var f=Object.getOwnPropertyDescriptor(d,e);if(!f){var g=-1!==c.indexOf(e);g&&(a._syncedAttrs[e]=!0),Object.defineProperty(d,e,{get:function(){return this.model[e]},set:function(h){if(this.model[e]=h,g){var j=this.getAttribute(e);'boolean'==typeof h?h&&''!==j?this.setAttribute(e,''):''===j&&!h&&this.removeAttribute(e):j!==h&&this.setAttribute(e,h)}}})}})}function setupChildMO(a){var b=!1,c=function(){b||a.childrenConnectedCallback()},d=new MutationObserver(c);return d.observe(a,{childList:!0}),a.childNodes.length&&asap(c),function(){b=!0,d.disconnect()}}export default Bram;export{Element,Bram};

